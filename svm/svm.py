# -*- coding: utf-8 -*-
"""SVM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L9fFqpTbuBRxQHBEOIwyNmGaIWKLOg_k
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix

from google.colab import files
uploaded = files.upload()

# Load the CSV file
import pandas as pd
df = pd.read_csv('diabetes.csv')
df.head()

# Assuming 'df' is your DataFrame loaded from 'diabetes.csv'
# Extract features (X) and target (y) from the DataFrame

# Assuming 'Outcome' is the name of the target column in your dataset:
X = df.drop('Outcome', axis=1)  # Features are all columns except 'Outcome'
y = df['Outcome']              # Target is the 'Outcome' column

# Now you can perform the train-test split:
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create SVM classifier
svm_model = SVC(kernel='linear')  # You can also try 'rbf', 'poly', or 'sigmoid'

# Train the model
svm_model.fit(X_train, y_train)

# Predict on test set
y_pred = svm_model.predict(X_test)

# Evaluation metrics
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Use only 2 features for visualization
from sklearn.datasets import load_iris # Import the load_iris function
iris = load_iris() # Load the iris dataset
X_vis = iris.data[:, :2]
y_vis = iris.target

X_train_vis, X_test_vis, y_train_vis, y_test_vis = train_test_split(X_vis, y_vis, test_size=0.2, random_state=42)
svm_vis = SVC(kernel='linear')
svm_vis.fit(X_train_vis, y_train_vis)

# Plotting decision boundaries
def plot_decision_boundary(X, y, model):
    h = .02
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.contourf(xx, yy, Z, alpha=0.8)
    plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.title('SVM Decision Boundary')
    plt.show()

plot_decision_boundary(X_train_vis, y_train_vis, svm_vis)

