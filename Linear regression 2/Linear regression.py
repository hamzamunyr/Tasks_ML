# -*- coding: utf-8 -*-
"""Welcome to Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import seaborn as sns

print("✓ Libraries imported successfully!")

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Real estate.csv')
df.head()

np.random.seed(42)

n_samples = 200

square_feet = np.random.randint(800, 3500, n_samples)
bedrooms = np.random.randint(1, 6, n_samples)
age = np.random.randint(0, 50, n_samples)
distance_to_city = np.random.uniform(1, 30, n_samples)

price = (square_feet * 150 +
         bedrooms * 10000 -
         age * 1000 -
         distance_to_city * 2000 +
         np.random.normal(0, 20000, n_samples))

data = pd.DataFrame({
    'square_feet': square_feet,
    'bedrooms': bedrooms,
    'age': age,
    'distance_to_city': distance_to_city,
    'price': price
})

print("\n✓ Dataset created!")
print(f"\nDataset shape: {data.shape}")
print("\nFirst 5 rows:")
print(data.head())

print("\n" + "="*50)
print("DATA EXPLORATION")
print("="*50)

print("\nDataset Statistics:")
print(data.describe())

print("\nChecking for missing values:")
print(data.isnull().sum())

# Visualize correlations
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', center=0)
plt.title('Feature Correlation Matrix')
plt.tight_layout()
plt.show()

X = data[['square_feet', 'bedrooms', 'age', 'distance_to_city']]
y = data['price']

print("\n✓ Features (X) and target (y) separated")
print(f"X shape: {X.shape}")
print(f"y shape: {y.shape}")

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print("\n✓ Data split into train and test sets")
print(f"Training set: {X_train.shape[0]} samples")
print(f"Testing set: {X_test.shape[0]} samples")

model = LinearRegression()
model.fit(X_train, y_train)

print("\n✓ Model trained successfully!")

print("\n" + "="*50)
print("MODEL PARAMETERS")
print("="*50)

print("\nIntercept (β₀):", f"{model.intercept_:,.2f}")
print("\nCoefficients (β₁, β₂, β₃, β₄):")
for feature, coef in zip(X.columns, model.coef_):
    print(f"  {feature:20s}: {coef:,.2f}")

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

print("\n✓ Predictions made!")

print("\n" + "="*50)
print("MODEL EVALUATION")
print("="*50)

# Training metrics
train_r2 = r2_score(y_train, y_train_pred)
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
train_mae = mean_absolute_error(y_train, y_train_pred)

print("\nTraining Set Performance:")
print(f"  R² Score: {train_r2:.4f}")
print(f"  RMSE: ${train_rmse:,.2f}")
print(f"  MAE: ${train_mae:,.2f}")

# Testing metrics
test_r2 = r2_score(y_test, y_test_pred)
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
test_mae = mean_absolute_error(y_test, y_test_pred)

print("\nTesting Set Performance:")
print(f"  R² Score: {test_r2:.4f}")
print(f"  RMSE: ${test_rmse:,.2f}")
print(f"  MAE: ${test_mae:,.2f}")

fig, axes = plt.subplots(1, 2, figsize=(15, 5))

# Training set
axes[0].scatter(y_train, y_train_pred, alpha=0.6, edgecolors='k')
axes[0].plot([y_train.min(), y_train.max()],
             [y_train.min(), y_train.max()],
             'r--', lw=2, label='Perfect Prediction')
axes[0].set_xlabel('Actual Price')
axes[0].set_ylabel('Predicted Price')
axes[0].set_title(f'Training Set\nR² = {train_r2:.4f}')
axes[0].legend()
axes[0].grid(True, alpha=0.3)

# Testing set
axes[1].scatter(y_test, y_test_pred, alpha=0.6, edgecolors='k', color='orange')
axes[1].plot([y_test.min(), y_test.max()],
             [y_test.min(), y_test.max()],
             'r--', lw=2, label='Perfect Prediction')
axes[1].set_xlabel('Actual Price')
axes[1].set_ylabel('Predicted Price')
axes[1].set_title(f'Testing Set\nR² = {test_r2:.4f}')
axes[1].legend()
axes[1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

print("\n" + "="*50)
print("MAKING NEW PREDICTIONS")
print("="*50)

# Example: predict price for a new house
new_house = pd.DataFrame({
    'square_feet': [2000],
    'bedrooms': [3],
    'age': [5],
    'distance_to_city': [10]
})

predicted_price = model.predict(new_house)[0]

print("\nNew house details:")
print(new_house.to_string(index=False))
print(f"\nPredicted price: ${predicted_price:,.2f}")

plt.figure(figsize=(10, 6))
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Coefficient': model.coef_
}).sort_values('Coefficient', key=abs, ascending=False)

plt.barh(feature_importance['Feature'], feature_importance['Coefficient'])
plt.xlabel('Coefficient Value')
plt.title('Feature Importance (Coefficient Magnitude)')
plt.axvline(x=0, color='black', linestyle='-', linewidth=0.5)
plt.tight_layout()
plt.show()

print("\n" + "="*50)
print("✓ LINEAR REGRESSION COMPLETE!")
print("="*50)

